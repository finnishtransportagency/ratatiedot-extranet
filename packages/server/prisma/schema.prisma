// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CategoryDataBase {
  id                     String                @id @default(uuid())
  rataextraRequestPage   String
  alfrescoFolder         String
  categoryDataContents   CategoryDataContents?
  categoryComponents     CategoryComponent[]
  writeRights            String
  FavoriteCategory       FavoriteCategory[]
  hasClassifiedContent   Boolean               @default(false)
  hasConfidentialContent Boolean               @default(false)
  Activity               Activity[]
}

model CategoryDataContents {
  id               String           @id @default(uuid())
  categoryDataBase CategoryDataBase @relation(fields: [baseId], references: [id])
  baseId           String           @unique
  fields           Json
}

model CategoryComponent {
  id               String           @id @default(uuid())
  categoryDataBase CategoryDataBase @relation(fields: [categoryId], references: [id])
  categoryId       String
  node             Node?
  card             Card?
}

model Node {
  id                  String             @id @default(uuid())
  title               String
  type                String
  alfrescoNodeId      String
  CategoryComponent   CategoryComponent? @relation(fields: [categoryComponentId], references: [id])
  categoryComponentId String             @unique
}

model Card {
  id                  String             @id @default(uuid())
  title               String
  content             Json
  CategoryComponent   CategoryComponent? @relation(fields: [categoryComponentId], references: [id])
  categoryComponentId String             @unique
}

model FavoriteCategory {
  id               String           @id @default(uuid())
  userId           String
  categoryDataBase CategoryDataBase @relation(fields: [categoryId], references: [id])
  categoryId       String

  @@unique([userId, categoryId], name: "favoriteCategoryIdentifier") // compound unique constraint
}

model Activity {
  id               String            @id @default(uuid())
  fileName         String
  categoryDataBase CategoryDataBase? @relation(fields: [categoryId], references: [id])
  categoryId       String?
  alfrescoId       String?
  timestamp        DateTime
  action           String
  mimeType         String
  activityId       Int               @unique
}

model Notice {
  id               String    @id @default(uuid())
  title            String?
  content          Json
  authorId         String?
  createdTime      DateTime  @default(now())
  publishTimeStart DateTime  @default(now())
  publishTimeEnd   DateTime?
  showAsBanner     Boolean   @default(false)
}

model Balise {
  id          String          @id @default(uuid())
  secondaryId Int             @unique
  version     Int
  description String
  bucketId    String
  fileTypes   String[] // ["file1.leu", "file2.il", "data.pdf", ...]. stores full filenames to track all files
  history     BaliseVersion[]
  createdBy   String
  createdTime DateTime        @default(now())
  locked      Boolean         @default(false)
  lockedBy    String?
  lockedTime  DateTime?
  deletedAt   DateTime?
  deletedBy   String?
}

model BaliseVersion {
  id                 String    @id @default(uuid())
  baliseId           String
  balise             Balise    @relation(fields: [baliseId], references: [id])
  secondaryId        Int
  version            Int
  description        String
  bucketId           String
  fileTypes          String[]
  createdBy          String
  createdTime        DateTime
  locked             Boolean
  lockedBy           String?
  lockedTime         DateTime?
  versionCreatedTime DateTime  @default(now())

  @@index([baliseId, version])
}

model Area {
  id          String    @id @default(uuid())
  name        String // e.g., "Helsinki-Riihim√§ki"
  shortName   String // e.g., "Alue 1"
  key         String    @unique // e.g., "area_1"
  idRangeMin  Int // e.g., 10000
  idRangeMax  Int // e.g., 19999
  description String? // Optional description
  color       String? // Optional color for UI
  active      Boolean   @default(true)
  createdBy   String
  createdTime DateTime  @default(now())
  updatedBy   String?
  updatedTime DateTime?

  @@index([idRangeMin, idRangeMax])
}
